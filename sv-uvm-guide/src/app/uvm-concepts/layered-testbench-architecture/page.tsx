import React from 'react';
import TopicPage from '@/components/templates/TopicPage';
import AnimatedUvmTestbenchDiagram from '@/components/diagrams/AnimatedUvmTestbenchDiagram';

interface TopicData {
  title: string;
  description: string; // Will be used for metadata, not passed to TopicPage
  level1: string;
}

const LayeredTestbenchArchitecturePage: React.FC = () => {
  const topicData: TopicData = {
    title: "Layered Testbench Architecture",
    description: "Explore the standard UVM (Universal Verification Methodology) testbench structure, a cornerstone of modern ASIC and FPGA verification.",
    level1: "The UVM layered testbench provides a standardized, reusable, and modular architecture for creating robust verification environments. It organizes components into logical layers, facilitating complexity management and promoting best practices in functional verification.",
  };

  const level2Content = (
    <section className="my-8">
      <h2 className="text-2xl font-semibold mb-4">Interactive UVM Testbench Diagram</h2>
      <p className="mb-4">
        The UVM testbench architecture is composed of several key components that interact in a standardized way.
        Hover over the components in the diagram below to learn more about their roles and responsibilities.
      </p>
      <div className="flex justify-center items-center my-8 p-4 border rounded-lg shadow-sm bg-white">
        <AnimatedUvmTestbenchDiagram />
      </div>
      <p>
        This layered approach promotes modularity and reusability. The main components include:
      </p>
      <ul className="list-disc list-inside my-4">
        <li><strong>UVM Test:</strong> The top-level entity that configures and initiates the test environment.</li>
        <li><strong>UVM Environment (Env):</strong> A container for agents, scoreboards, and other high-level components.</li>
        <li><strong>UVM Agent:</strong> Manages a specific protocol interface. It typically contains a sequencer, driver, and monitor.</li>
        <li><strong>Sequencer:</strong> Responsible for generating sequences of transactions (stimulus).</li>
        <li><strong>Driver:</strong> Drives the transactions generated by the sequencer onto the DUT interface.</li>
        <li><strong>Monitor:</strong> Observes the DUT interface and captures transactions, typically broadcasting them for analysis.</li>
        <li><strong>Scoreboard:</strong> Verifies the correctness of DUT behavior by comparing actual results (from monitors) with expected results.</li>
        <li><strong>DUT (Design Under Test):</strong> The actual hardware design that is being verified.</li>
      </ul>
      <p>
        Understanding these layers and their interactions is crucial for building effective and maintainable UVM verification environments.
        TLM (Transaction-Level Modeling) ports and exports are used for communication between these components, promoting loose coupling.
      </p>
    </section>
  );

  const level3Content = (
    <p>Deep dive into component configurations, factory usage, and advanced TLM connections will be covered here. This section will also explore variations in testbench architecture for different verification scenarios.</p>
  );

  return (
    <TopicPage
      title={topicData.title}
      level1Content={<p>{topicData.level1}</p>}
      level2Content={level2Content}
      level3Content={level3Content}
    />
  );
};

export default LayeredTestbenchArchitecturePage;

export async function generateMetadata() {
  const topicData: TopicData = {
    title: "Layered Testbench Architecture",
    description: "Understand the UVM layered testbench architecture with an interactive diagram, including tests, environments, agents, sequencers, drivers, monitors, and scoreboards.",
    level1: "The UVM layered testbench provides a standardized, reusable, and modular architecture for creating robust verification environments."
  };
  return {
    title: `${topicData.title} | SystemVerilog & UVM Mastery`,
    description: topicData.description,
  };
}
