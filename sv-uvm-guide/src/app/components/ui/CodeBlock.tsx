import React from 'react';
import { rehype } from 'rehype';
import rehypePrettyCode from 'rehype-pretty-code';
import { CopyButton } from './CopyButton'; // Client component for the button

interface CodeBlockProps {
  code: string;
  language: string;
  className?: string;
  theme?: string; // Allow theme override, default to a 'Digital Blueprint' friendly one
}

const CodeBlock: React.FC<CodeBlockProps> = async ({
  code,
  language,
  className = '',
  theme = 'github-dark' // Default dark theme, e.g., 'night-owl', 'synthwave-84', 'github-dark'
                        // 'github-dark' is a safe default often available in shiki.
                        // For specific themes like 'SynthWave '84', ensure shiki supports it or it's custom-loaded.
}) => {
  const options = {
    theme: theme,
    keepBackground: true,
    onVisitLine(node: any) {
      // Prevent lines from collapsing in `display: grid` mode, and allow empty
      // lines to be copy/pasted
      if (node.children.length === 0) {
        node.children = [{ type: 'text', value: ' ' }];
      }
    },
    onVisitHighlightedLine(node: any) {
      // Each line node by default has `class="line"`.
      node.properties.className.push('highlighted');
    },
    onVisitHighlightedChars(node: any) {
      // Each word node has `class="word"`.
      node.properties.className = ['word--highlighted'];
    },
  };

  const highlightedCode = await rehype()
    .data('settings', { fragment: true })
    // @ts-ignore - rehype-pretty-code types might not perfectly align with rehype
    .use(rehypePrettyCode, options)
    .process(code);

  return (
    <div className={`relative group ${className}`}>
      <CopyButton textToCopy={code} />
      <div
        className="prose prose-sm dark:prose-invert max-w-none
                   [&>pre]:bg-background/80 [&>pre]:backdrop-blur-sm [&>pre]:border [&>pre]:border-[rgba(100,255,218,0.2)]
                   [&>pre]:rounded-md [&>pre]:p-4 [&>pre]:shadow-md
                   [&_code]:font-mono [&_code]:text-sm" // Ensure mono font and consistent sizing
        dangerouslySetInnerHTML={{ __html: highlightedCode.toString() }}
      />
      {/*
        Styling note:
        - The [&>pre] targets the <pre> tag generated by rehype-pretty-code.
        - We apply background, border, rounded corners, and padding here.
        - `prose` and `prose-sm dark:prose-invert` provide some base styling for code elements.
        - `max-w-none` is important if this is inside a container with max-width.
        - `[&_code]:font-mono` ensures the code itself uses the mono font family.
      */}
    </div>
  );
};

export { CodeBlock };
