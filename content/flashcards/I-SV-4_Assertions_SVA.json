[
  {
    "id": "sva-1",
    "question": "What role does a sequence play in SVA?",
    "answer": "A sequence names a temporal pattern of events—like req followed by ack—that properties can reuse." 
  },
  {
    "id": "sva-2",
    "question": "Why prefer `assert property` over manual `if` checks for protocols?",
    "answer": "Concurrent assertions monitor every clock edge and automatically flag timing violations without duplicating procedural code." 
  },
  {
    "id": "sva-3",
    "question": "When would you choose `|=>` instead of `|->`?",
    "answer": "Use `|=>` when the consequent must begin after the antecedent completes; `|->` allows overlap on the same sample." 
  },
  {
    "id": "sva-4",
    "question": "Where should reusable assertions live?",
    "answer": "Place them in interfaces, bind files, or checker classes so they observe signals without modifying DUT RTL." 
  },
  {
    "id": "sva-5",
    "question": "How can assertions aid coverage?",
    "answer": "Every property can also be sampled with `cover property`, giving objective evidence that the desired behavior occurred." 
  }
]
