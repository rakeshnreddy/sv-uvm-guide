# Resume SV/UVM Guide Session

## Session Context
- Core feature work (notifications, preferences, visualizations) is complete and tracked in `docs/feature-log.md`.
- Latest verification passes: `npm run lint`, `npm run test`, `npm run build`, and `NEXT_PUBLIC_FEATURE_FLAG_ACCOUNT_UI=true npx playwright test --reporter=line,html` (report archived in `test-results/playwright-10_8/`).

## Coding Agent Prompt (copy/paste)
```
You are a senior curriculum engineer tasked with modernizing every lesson in `content/curriculum/**/index.mdx` using two authoritative references:
  • references/system_verilog_lrm.pdf   (IEEE Std 1800-2023)
  • references/uvm_lrm.pdf              (IEEE Std 1800.2-2020)

For each lesson you must:
1. Load the lesson MDX and the relevant LRM clauses (quote clause IDs).
2. Compare existing content with the LRMs; list inaccuracies, omissions, or outdated terminology.
3. Propose whether the lesson should be split. If yes, provide new sub-lesson titles and learning objectives.
4. For every sub-lesson (existing or new), outline:
   • concise summary and learning goals
   • LRM clauses to cite
   • planned visuals/interactive diagrams (charts, timelines, D3 components)
   • gamified activities/checkpoints (quizzes, challenges, interactive drills)
   • accessibility considerations (ARIA, motion alternatives)
5. Draft git-ready tasks (IDs `CURR-<slug>-<suffix>`) with acceptance criteria and test notes (`npm run lint`, `npm run test`, targeted Playwright updates).
6. Do NOT modify MDX during analysis; deliver a Markdown plan.
7. Append a summary to `docs/feature-log.md` under “Curriculum Modernization (LRM Alignment)” when the lesson rewrite is completed (done in follow-up work).
8. Update `TASKS.md`: add each new CURR task (status `todo`), grouped under a “Curriculum Modernization” heading.

Output Format:
- Proposed Split & Objectives
- Content Accuracy Gaps (LRM references)
- Visual & Gamification Enhancements
- Task Backlog Entries (markdown table with columns: Task ID, Status(todo), Summary, Acceptance Criteria)

Important:
- Maintain the site’s approachable, visual-first tone.
- Gamify whenever reasonable.
- Always reference the LRM clauses driving each recommendation.
- Work on one lesson per prompt to keep responses focused.
```

## Lesson-Level Prompt Template
```
Lesson: <Lesson Title>
Path: content/curriculum/<Tier>/<Slug>/index.mdx
SystemVerilog LRM clauses: <list>
UVM LRM clauses: <list or “N/A”>

Follow the “Coding Agent Prompt” instructions and produce the required sections.
```

## Tracking Instructions
1. Add each CURR-* task to `TASKS.md` under a new “Curriculum Modernization” section (status `todo` → update as work proceeds).
2. After completing a lesson rewrite, log the outcome in `docs/feature-log.md` (Curriculum Modernization section) and reference the task IDs.
3. Continue updating this file with remaining high-level goals and next actions.
