**SV/UVM Guide – Resume Notes**

**Recent Progress (Session 2025-10-10 evening)**
- Converted every failing curriculum lesson that still referenced `<InteractiveCode>` into static SystemVerilog fences (`content/curriculum/**/*`) so the MDX compiler no longer throws `acorn` errors and the crawler can render foundational/advanced slugs again.
- Synced generated curriculum metadata with the refreshed copy (see `src/lib/curriculum-data.tsx` and `tests/__snapshots__/curriculum-generator.test.ts.snap`). Titles/descriptions for the RAL, debug, and SoC expert tracks now match the updated content files.
- Hardened the exercise flows: `tests/e2e/exercise-feedback.spec.ts` now relies on the new `window.__uvmAgentBuilderTest` hook to stage components deterministically, enforces post-drop counts, and uses refreshed feedback selectors. `tests/e2e/module5.spec.ts` asserts against the new `class soc_virtual_seq` snippet.
- Added a static `/api/feature-flags` endpoint plus minimal `_document.tsx` to support Playwright checks that read default flags.
- Updated progress trackers (`docs/planning/Actionable-Task-Plan.md`, `docs/feedback/Analysis-Report.md`) to log the MDX fixes and exercise locator work.

**Environment & Testing Notes**
- `npm run lint`, `npm run test`, and `npm run build` were **not** re-run this session. Snapshots were edited manually; re-verify with `npm run test` before committing.
- Playwright browsers are still missing on this machine/CI. Install with `npx playwright install-deps && npx playwright install` (or platform-equivalent) before re-running E2E.
- Use the existing wrapper `npm run test:e2e` (runs `node scripts/run-e2e-tests.cjs`) for the full suite. For fast iteration: `npx playwright test tests/e2e/curriculum-links.spec.ts`, `tests/e2e/curriculum-nav.spec.ts`, and `tests/e2e/exercise-feedback.spec.ts` cover today’s touchpoints.

**Outstanding Issues / Follow-ups**
- Navigation, feature-flag, mobile-sidebar, theming, and visualization specs still need locator cleanup and/or underlying UI fixes (`tests/e2e/navigation.spec.ts`, `feature-flags.spec.ts`, `mobile-navigation.spec.ts`, `theming.spec.ts`, `visualizations.spec.ts`).
- Interactive demo specs remain skipped per current guidance; keep them out of the “fix now” queue until the simulation API is ready.
- Confirm that no other MDX lessons still import interactive components: `rg "<InteractiveCode" content/curriculum` should stay empty.
- Re-run `npm run build` once Playwright dependencies are installed to make sure the curriculum slugs render on the server without 500s.

**Suggested Next Steps**
1. Install Playwright system deps, rerun the focused specs above, then the full `npm run test:e2e` to surface any remaining strict-mode failures.
2. Finish locator clean-up for navigation/search/mobile flows. The helper added in `tests/e2e/utils/navigation.ts` is ready to reuse once links expose reliable `data-testid`s or aria labels.
3. Patch the visualization pages so charts expose unique containers (e.g., `data-testid="data-type-chart"` already exists—ensure the SVG/series renders before the assertion). Revisit the chart components in `src/components/charts/` if hydration is gating rendering.
4. Once the suite is green, capture a new Playwright report and update Milestone 4 status again.
5. Run `npm run lint && npm run test && npm run build` to validate the codebase, then proceed with bundle analysis (`ANALYZE=true npm run build`) for the chart modularization follow-up.

**Reminders**
- Keep feature development paused until Milestones 1–4 close out.
- Log any future gating changes in `docs/feedback/Learning-First-Audit.md`.
- Before pushing: `npm run lint`, `npm run test`, `npm run build`, `npm run test:e2e`.
