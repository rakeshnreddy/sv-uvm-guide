export interface UvmPhase {
  name: string;
  type: 'build' | 'connect' | 'run' | 'cleanup';
  description: string;
  isTask: boolean;
  dependencies?: string[];
  objection?: string;
  activities?: string[];
  commonIssues?: string[];
  timing: { start: number; end: number };
  objectionTriggers?: { raise?: number; drop?: number };
}

export let uvmPhases: UvmPhase[] = [
  // Build Phases (run in order, top-down)
  {
    name: 'build',
    type: 'build',
    description: 'Constructs component hierarchy. New components are created here.',
    isTask: false,
    activities: ['create components', 'configure defaults'],
    commonIssues: ['misconfigured component hierarchy'],
    timing: { start: 0, end: 10 },
  },
  {
    name: 'connect',
    type: 'connect',
    description: 'Connects TLM ports and exports. Establishes communication paths.',
    isTask: false,
    dependencies: ['build'],
    activities: ['connect ports', 'set up analysis connections'],
    commonIssues: ['unconnected ports'],
    timing: { start: 10, end: 20 },
  },
  {
    name: 'end_of_elaboration',
    type: 'connect',
    description: 'Final checks before simulation starts. Final adjustments to component settings.',
    isTask: false,
    dependencies: ['connect'],
    activities: ['final configuration review'],
    commonIssues: ['late configuration changes'],
    timing: { start: 20, end: 30 },
  },

  // Run-Time Phases (run in parallel)
  {
    name: 'start_of_simulation',
    type: 'run',
    description: 'Prepare for the main simulation. Display banners, set up initial state.',
    isTask: false,
    dependencies: ['end_of_elaboration'],
    activities: ['display banners', 'initialize DUT'],
    commonIssues: ['missing initialization'],
    timing: { start: 30, end: 40 },
  },
  {
    name: 'pre_reset',
    type: 'run',
    description: 'Tasks before reset is asserted. E.g., wait for power-on.',
    isTask: true,
    dependencies: ['start_of_simulation'],
    activities: ['wait for power-good'],
    commonIssues: ['power sequence errors'],
    timing: { start: 40, end: 50 },
  },
  {
    name: 'reset',
    type: 'run',
    description: 'Assert and de-assert reset signals.',
    isTask: true,
    dependencies: ['pre_reset'],
    activities: ['toggle reset'],
    commonIssues: ['reset not asserted properly'],
    timing: { start: 50, end: 60 },
  },
  {
    name: 'post_reset',
    type: 'run',
    description: 'Tasks after reset is de-asserted. E.g., configure DUT.',
    isTask: true,
    dependencies: ['reset'],
    activities: ['configure registers'],
    commonIssues: ['register misconfiguration'],
    timing: { start: 60, end: 70 },
  },
  {
    name: 'pre_configure',
    type: 'run',
    description: 'Prepare for main stimulus. E.g., load memories.',
    isTask: true,
    dependencies: ['post_reset'],
    activities: ['load memories'],
    commonIssues: ['memory load failures'],
    timing: { start: 70, end: 80 },
  },
  {
    name: 'configure',
    type: 'run',
    description: 'Apply configuration to the DUT.',
    isTask: true,
    dependencies: ['pre_configure'],
    activities: ['apply configs'],
    commonIssues: ['invalid configuration data'],
    timing: { start: 80, end: 90 },
  },
  {
    name: 'post_configure',
    type: 'run',
    description: 'Wait for configuration to take effect.',
    isTask: true,
    dependencies: ['configure'],
    activities: ['wait for config settle'],
    commonIssues: ['config not settling'],
    timing: { start: 90, end: 100 },
  },
  {
    name: 'pre_main',
    type: 'run',
    description: 'Final preparations before the main stimulus.',
    isTask: true,
    dependencies: ['post_configure'],
    activities: ['final checks'],
    commonIssues: ['missing final checks'],
    timing: { start: 100, end: 110 },
  },
  {
    name: 'main',
    type: 'run',
    description: 'The main stimulus generation and checking phase.',
    isTask: true,
    dependencies: ['pre_main'],
    objection: 'Raise and drop objections to control test completion.',
    activities: ['generate sequences', 'collect coverage'],
    commonIssues: ['coverage holes'],
    timing: { start: 110, end: 160 },
    objectionTriggers: { raise: 110, drop: 160 },
  },
  {
    name: 'post_main',
    type: 'run',
    description: 'Stimulus is complete, wait for DUT to settle.',
    isTask: true,
    dependencies: ['main'],
    activities: ['drain DUT'],
    commonIssues: ['hanging transactions'],
    timing: { start: 160, end: 170 },
  },
  {
    name: 'pre_shutdown',
    type: 'run',
    description: 'Prepare for the end of the test.',
    isTask: true,
    dependencies: ['post_main'],
    activities: ['prepare shutdown'],
    commonIssues: ['unfinished cleanup'],
    timing: { start: 170, end: 180 },
  },
  {
    name: 'shutdown',
    type: 'run',
    description: 'Final stimulus, e.g., read out status registers.',
    isTask: true,
    dependencies: ['pre_shutdown'],
    objection: 'Drop objections once shutdown tasks finish.',
    activities: ['flush FIFOs', 'read status registers'],
    commonIssues: ['lingering objections'],
    timing: { start: 180, end: 200 },
    objectionTriggers: { raise: 180, drop: 200 },
  },
  {
    name: 'post_shutdown',
    type: 'run',
    description: 'Wait for all shutdown activity to complete.',
    isTask: true,
    dependencies: ['shutdown'],
    activities: ['wait for settling'],
    commonIssues: ['timeout waiting for settle'],
    timing: { start: 200, end: 210 },
  },

  // Cleanup Phases (run in order, bottom-up)
  {
    name: 'extract',
    type: 'cleanup',
    description: 'Extract data from scoreboard and coverage collectors.',
    isTask: false,
    dependencies: ['post_shutdown'],
    activities: ['gather data'],
    commonIssues: ['lost data'],
    timing: { start: 210, end: 220 },
  },
  {
    name: 'check',
    type: 'cleanup',
    description: 'Check for simulation errors and report results.',
    isTask: false,
    dependencies: ['extract'],
    activities: ['check errors'],
    commonIssues: ['missed errors'],
    timing: { start: 220, end: 230 },
  },
  {
    name: 'report',
    type: 'cleanup',
    description: 'Generate final simulation report.',
    isTask: false,
    dependencies: ['check'],
    activities: ['summarize results'],
    commonIssues: ['incomplete reports'],
    timing: { start: 230, end: 240 },
  },
  {
    name: 'final',
    type: 'cleanup',
    description: 'Final cleanup before simulation terminates.',
    isTask: false,
    dependencies: ['report'],
    activities: ['cleanup'],
    commonIssues: ['residual state'],
    timing: { start: 240, end: 250 },
  },
];

export const addUvmPhase = (phase: UvmPhase) => {
  uvmPhases = [...uvmPhases, phase];
};
